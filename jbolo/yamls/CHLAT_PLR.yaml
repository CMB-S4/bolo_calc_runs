version: {date: 20220303, name: 'CHLAT_PLR'}
# This is a re-creation of the BoloCalc model that was used for the PLR inputs,
# run by Carlos Sierra (Jeff McMahon's student, in June 2020.)
#  https://drive.google.com/drive/folders/1TH2qPwaxpEemM52esZNhMFF5tocfTtAK
config:
  dnu: 0.01 # GHz frequency resolution for integrals
# We set dust and synchrotron very small so they are ignored.  Zero eventually throws an error.
sources:
  cmb: {source_type: blackbody, T: 2.726, emiss: 1.0}
  # dust: {source_type: greybody, amplitude: 1e-5, scale_frequency: 353.0, scale_temperature: 19.7}
  # synchrotron:  {source_type: powerlaw, spectral_index: -3.0, amplitude: 1e-10, scale_frequency: 30.0}
  atmosphere:
    # This shows how to do it with the bolo-calc hdf5 file.
    source_type: hdf5  #
    file: 'atmos/atm_20201217.hdf5'
    site: 'Atacama'
    pwv: 1000      # microns, from 0 to 8000
    elevation: 50  # degrees, integer from 1 to 90.
optics_defaults: {temperature: 273.0, reflection: 0.0, scatter_frac: 0.0, spillover: 0.0, absorption: 0.0}
optical_elements:
  # requires python 3.7 or later, because we assume dict{} is ordered.
  # This list of elements starts with the one closest to the sky, and moves toward the detector.
  # Yes, as far as I can tell the PLR was run with the CHLAT having 3 mirrors.
  primary:      {obj_type: Bespoke, absorption:[0.000, 0.000, 0.002, 0.005, 0.011, 0.017], spillover: 0.02}
  Mirror1:      {obj_type: Bespoke, absorption:[0.000, 0.000, 0.002, 0.005, 0.011, 0.017] }
  Mirror2:      {obj_type: Bespoke, absorption:[0.000, 0.000, 0.002, 0.005, 0.011, 0.017] }
  window:       {obj_type: Bespoke, temperature: 265.0, reflection: 0.01, absorption:[0.001, 0.002, 0.005, 0.010, 0.014, 0.017]}
  ##### ZZZ
  # IR shaders:  emissivity proportional to frequency, pinned to 90GHz value derived from Bicep3
  IRShader1 :    {obj_type: Bespoke, temperature: 291.0, absorption: 0.001}
  IRShader2 :    {obj_type: Bespoke, temperature: 274.4, absorption: 0.001}
  IRShader3 :    {obj_type: Bespoke, temperature: 243.2, absorption: 0.001}
  IRShader4 :    {obj_type: Bespoke, temperature: 197.0, absorption: 0.001}
  AluminaF1:     {obj_type: LossTangent, temperature: 80.98, reflection: 0.02, thickness: 0.002, index: 3.1, loss_tangent: 0.5E-4}
  IRShader5 :    {obj_type: Bespoke, temperature: 69.19, absorption: 0.001}
  IRShader6 :    {obj_type: Bespoke, temperature: 58.96, absorption: 0.001}
  AluminaF2:     {obj_type: LossTangent, temperature: 40.02, reflection: 0.02, thickness: 0.002, index: 3.1, loss_tangent: 0.5E-4}
  LowPass1:      {obj_type: Bespoke,     temperature: 39.3 ,  absorption: 0.01, reflection: 0.05}
  Lens1:         {obj_type: Bespoke,     temperature: 4.5,   absorption:[0.002, 0.003, 0.007, 0.011, 0.016, 0.02], reflection: 0.006}
  LowPass2:      {obj_type: Bespoke,     temperature: 4.01 ,  absorption: 0.01, reflection: 0.05}
  Lens2:         {obj_type: Bespoke,     temperature: 1.2,   absorption:[0.002, 0.003, 0.007, 0.011, 0.016, 0.02], reflection: 0.006}
  # The PLR BoloCalc run used gaussians for LF and HF, but bespoke values for MF.  I calculated
  # the LF and MF values and am using those here, and am using the specified MF values directly copied.
  lyot:          {obj_type: Bespoke,     temperature: 1.2, absorption:[0.781, 0.597, 0.750, 0.571, 0.160, 0.060 ]} 
  LowPass3:      {obj_type: Bespoke,     temperature: 1.00 ,  absorption: 0.01, reflection: 0.05}
  LowPass4:      {obj_type: Bespoke,     temperature: 1.00 ,  absorption: 0.01, reflection: 0.05}
  Lens3:         {obj_type: Bespoke,     temperature: 1.2,   absorption:[0.002, 0.003, 0.007, 0.011, 0.016, 0.02], reflection: 0.006}
  LowPass5:      {obj_type: Bespoke,     temperature: 1.00 ,  absorption: 0.01, reflection: 0.05}
bolo_config:
  # For aperture stop calcs
  waist_factor: 3.0
  f_number: 2.16  # 5.5m illumination
  #
  N_polarizations: 1
  #
  AOmega_method: ModeCount   # or "Fixed"
  N_modes: 1  # required if method == "ModeCount"
  #
  psat_method: from_optical_power # "specified" or "from_optical_power", in which case psat = P_optical * psat_factor
  psat_factor: 3.0  # must a number if psat_method is "from_optical_power"
  beta: 2.7   # this is beta = n-1. bolo-calc called it "carrier index". Note that G_dynamic is found from psat, T_c, and carrier_index
  #
  T_bath: 0.1
  T_c: 0.159
  R_bolo: 0.008   # as biased in operation, ie less than R_normal
  yield: 0.8
readout:
  method: 'fraction'  #in anticipation of getting NEI number/formula.
channels:
  LF_1:
    chnum: 0  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  27.0   # not used.  frac_bw = 0.222
    nu_low: 24.00        # if a band_response file is given, these set the low and high limits of integration.
    nu_high: 30.00
    read_frac: 0.05
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : spt3g_90_pixelband.txt }
    det_eff: 0.70
    psat: None  # see psat_method above.
    horn_diameter: 16.1e-3   # meters
    pixel_spacing: 16.1e-3
    num_det_per_wafer: 96
  LF_2:
    chnum: 1  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  39.0  # not used.  frac bw = 0.462
    nu_low: 29.99        # if a band_response file is given, these set the low and high limits of integration.
    nu_high: 48.01
    read_frac: 0.05
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : spt3g_90_pixelband.txt }
    det_eff: 0.7
    psat: None  # see psat_method above.
    horn_diameter: 16.1e-3   # meters
    pixel_spacing: 16.1e-3
    num_det_per_wafer: 96
  MF_1:
    chnum: 2  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  93.0  # not used, frac bw = 0.376
    nu_low: 75.52        # if a band_response file is given, these set the low and high limits of integration.
    nu_high: 110.48
    read_frac: 0.05
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : spt3g_90_pixelband.txt }
    det_eff: 0.7
    psat: None  # see psat_method above.
    horn_diameter: 5.3e-3   # meters
    pixel_spacing: 5.3e-3
    num_det_per_wafer: 864
  MF_2:
    chnum: 3  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  145.0  # not used, frac_bw = 0.276
    nu_low: 124.99        # if a band_response file is given, these set the low and high limits of integration.
    nu_high: 165.01
    read_frac: 0.05
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : spt3g_90_pixelband.txt }
    det_eff: 0.70
    psat: None  # see psat_method above.
    horn_diameter: 5.3e-3   # meters
    pixel_spacing: 5.3e-3
    num_det_per_wafer: 864
  HF_1:
    chnum: 4  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  225.0  # not used, frac_bw = 0.267
    nu_low: 194.96        # if a band_response file is given, these set the low and high limits of integration.
    nu_high: 255.04
    read_frac: 0.05
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : spt3g_90_pixelband.txt }
    det_eff: 0.70
    psat: None  # see psat_method above.
    horn_diameter: 5.3e-3   # meters
    pixel_spacing: 5.3e-3
    num_det_per_wafer: 864
  HF_2:
    chnum: 5  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  278.0  # not used, frac_bw=0.162
    nu_low: 255.48        # if a band_response file is given, these set the low and high limits of integration.
    nu_high: 300.52
    read_frac: 0.05
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : spt3g_90_pixelband.txt }
    det_eff: 0.70
    psat: None  # see psat_method above.
    horn_diameter: 5.3e-3   # meters
    pixel_spacing: 5.3e-3
    num_det_per_wafer: 864
